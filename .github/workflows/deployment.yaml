name: Deployment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Short SHA tag to deploy (leave blank to use 'latest')"
        required: false
        default: ""

permissions:
  contents: read
  packages: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ntx-django
  TF_DIR: infra/

jobs:
  deploy:
    name: Auto Deployment
    runs-on: ubuntu-24.04

    concurrency:
      group: manual-deploy
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute vars
        id: vars
        run: |
          echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
          # Fallback to 'latest' when input is blank
          if [ -z "${{ github.event.inputs.image_tag }}" ]; then
            echo "IMAGE_TAG=latest" >> "$GITHUB_ENV"
          else
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> "$GITHUB_ENV"
          fi
          echo "IMAGE_REF=ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag || '' }}" >> "$GITHUB_ENV"

      - name: Login to GHCR (read)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image tag exists
        run: |
          set -euo pipefail
          IMAGE_TAG="${IMAGE_TAG:-latest}"
          IMAGE="ghcr.io/${OWNER_LC}/${IMAGE_NAME}:${IMAGE_TAG}"
          echo "Checking image: ${IMAGE}"
          if ! docker manifest inspect "${IMAGE}" > /dev/null 2>&1; then
            echo "::error::Image not found in GHCR: ${IMAGE}"
            exit 1
          fi
          echo "TF_APP_IMAGE=${IMAGE}" >> "$GITHUB_ENV"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform Init (DigitalOcean Spaces backend)
        working-directory: ${{ env.TF_DIR }}
        env:
          SPACES_KEY:    ${{ secrets.SPACES_KEY }}
          SPACES_SECRET: ${{ secrets.SPACES_SECRET }}
          SPACES_BUCKET: ${{ secrets.SPACES_BUCKET }}
          SPACES_REGION: ${{ secrets.SPACES_REGION }}
        run: |
          set -euo pipefail
          ENDPOINT="https://${SPACES_REGION}.digitaloceanspaces.com"
          terraform init \
            -backend-config="endpoint=${ENDPOINT}" \
            -backend-config="access_key=${SPACES_KEY}" \
            -backend-config="secret_key=${SPACES_SECRET}" \
            -backend-config="bucket=${SPACES_BUCKET}" \
            -backend-config="key=terraform/state/do-droplet.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="force_path_style=true" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_region_validation=true" \
            -backend-config="skip_requesting_account_id=true"

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_VAR_do_token:   ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_app_image:  ${{ env.TF_APP_IMAGE }}
        run: terraform plan -input=false

      - name: Terraform Apply (auto-approve)
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_VAR_do_token:   ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_app_image:  ${{ env.TF_APP_IMAGE }}
        run: terraform apply -input=false -auto-approve
