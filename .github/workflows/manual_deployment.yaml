name: Deploy Production

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to deploy (tag like v1.2.3 or commit SHA). Leave blank for latest tag."
        required: false
        type: string

permissions:
  contents: read
  packages: read

concurrency:
  group: deploy
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  deploy:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Choose ref
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ inputs.ref || '' }}" ]]; then
            REF="${{ inputs.ref }}"
          else
            LATEST_TAG="$(git describe --tags "$(git rev-list --tags --max-count=1)" 2>/dev/null || true)"
            if [[ -z "${LATEST_TAG}" ]]; then
              echo "No tags found. Provide a tag or commit SHA in the dispatch form." >&2
              exit 1
            fi
            REF="${LATEST_TAG}"
          fi

          COMMIT="$(git rev-parse "${REF}^{commit}")"
          SHA7="${COMMIT:0:7}"

          OWNER_LC="$(echo '${{ env.OWNER }}' | tr '[:upper:]' '[:lower:]')"
          IMAGE_SHA="${{ env.REGISTRY }}/${OWNER_LC}/django:${SHA7}"
          IMAGE_LATEST="${{ env.REGISTRY }}/${OWNER_LC}/django:latest"

          echo "ref=${REF}" >> "$GITHUB_OUTPUT"
          echo "commit=${COMMIT}" >> "$GITHUB_OUTPUT"
          echo "sha7=${SHA7}" >> "$GITHUB_OUTPUT"
          echo "owner_lc=${OWNER_LC}" >> "$GITHUB_OUTPUT"
          echo "image_sha=${IMAGE_SHA}" >> "$GITHUB_OUTPUT"
          echo "image_latest=${IMAGE_LATEST}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR (to check existence)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pick image tag (prefer SHA, else latest)
        id: image
        shell: bash
        run: |
          set -euo pipefail
          if docker buildx imagetools inspect "${{ steps.pick.outputs.image_sha }}" > /dev/null 2>&1; then
            echo "image=${{ steps.pick.outputs.image_sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "WARN: SHA image not found; falling back to :latest"
            echo "image=${{ steps.pick.outputs.image_latest }}" >> "$GITHUB_OUTPUT"
          fi
          echo "Chosen image: $(cat $GITHUB_OUTPUT | sed -n 's/^image=//p')"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init (Spaces backend)
        working-directory: infra/do-droplet
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          SPACES_KEY:      ${{ secrets.SPACES_KEY }}
          SPACES_SECRET:   ${{ secrets.SPACES_SECRET }}
          SPACES_BUCKET:   ${{ secrets.SPACES_BUCKET }}
          SPACES_REGION:   ${{ secrets.SPACES_REGION }}
        run: |
          set -euo pipefail
          ENDPOINT="https://${SPACES_REGION}.digitaloceanspaces.com"

          terraform init \
            -backend-config="endpoint=${ENDPOINT}" \
            -backend-config="access_key=${SPACES_KEY}" \
            -backend-config="secret_key=${SPACES_SECRET}" \
            -backend-config="bucket=${SPACES_BUCKET}" \
            -backend-config="key=terraform/state/do-droplet.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="force_path_style=true" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_region_validation=true" \
            -backend-config="skip_requesting_account_id=true"

      - name: Terraform Apply
        working-directory: infra/do-droplet
        env:
          TF_VAR_do_token:    ${{ secrets.DIGITALOCEAN_TOKEN }}
          TF_VAR_ghcr_user:   ${{ secrets.GHCR_USERNAME }}   # leave unset if public
          TF_VAR_ghcr_token:  ${{ secrets.GHCR_READ_TOKEN }} # PAT with read:packages; leave unset if public
        run: |
          set -euo pipefail

          # Define your deploy settings here (or move to a tfvars file)
          terraform apply -auto-approve \
            -var "ssh_key_name=${{ secrets.DO_SSH_KEY_NAME }}" \
            -var "name=django-app" \
            -var "region=nyc3" \
            -var "size=s-1vcpu-1gb" \
            -var "image_slug=ubuntu-24-04-x64" \
            -var "image=${{ steps.image.outputs.image }}" \
            -var 'container_env={
              DJANGO_SETTINGS_MODULE="config.settings"
              PYTHONUNBUFFERED="1"
              PORT="8000"
              # Add your real env here; consider using DO Secrets Manager + fetch at runtime
            }'

      - name: Show droplet IP
        id: out
        working-directory: infra/do-droplet
        run: |
          IP="$(terraform output -raw droplet_ip)"
          echo "ip=${IP}" >> "$GITHUB_OUTPUT"
          echo "Droplet public IP: ${IP}"
