services:
  
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    environment:
      OAUTH2_PROXY_PROVIDER: google           # or: oidc, github, google, etc.
      OAUTH2_PROXY_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH_COOKIE_SECRET}   # 32B base64 (e.g., `openssl rand -base64 32`)
      OAUTH2_PROXY_EMAIL_DOMAINS: "neurotechx.xyz"       # restrict if desired
      OAUTH2_PROXY_REDIRECT_URL: https://${API_HOST}/oauth2/callback
      OAUTH2_PROXY_SCOPE: "openid email profile"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"  # sets X-Auth-Request-* headers
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_COOKIE_SECURE: "true"
      OAUTH2_PROXY_COOKIE_DOMAINS: ".neurotechx.xyz"
      OAUTH2_PROXY_WHITELIST_DOMAINS: ".neurotechx.xyz"
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
    labels:
      - traefik.enable=true
      - traefik.http.routers.oauth2.rule=Host(`${API_HOST}`) && PathPrefix(`/oauth2/`)
      - traefik.http.routers.oauth2.entrypoints=websecure
      - traefik.http.routers.oauth2.tls.certresolver=le
    restart: unless-stopped

  traefik:
    image: traefik:v3.1
    command:
      - --providers.docker
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${LE_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --api.dashboard=true
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /opt/stack/certs:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.tls.certresolver=le
      - traefik.http.routers.dashboard.service=api@internal
    restart: unless-stopped

  django:
    image: ghcr.io/${GITHUB_OWNER}/django:${APP_TAG}
    env_file: /opt/stack/django/.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`${API_HOST}`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls.certresolver=le
      - traefik.http.services.api.loadbalancer.server.port=8000
      - traefik.http.middlewares.oauth2-forwardauth.forwardauth.address=http://oauth2-proxy:4180/oauth2/auth
      - traefik.http.middlewares.oauth2-forwardauth.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.oauth2-forwardauth.forwardauth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email,Authorization
      - traefik.http.routers.api.middlewares=oauth2-forwardauth@docker
    restart: unless-stopped

  # Use DO Managed PG if possible; otherwise:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes: [ "pgdata:/var/lib/postgresql/data" ]
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    restart: unless-stopped

  node_exporter:
    image: prom/node-exporter:v1.8.2
    pid: host
    network_mode: host
    command:
      - --collector.systemd
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    ports: [ "127.0.0.1:9099:8080" ]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.55.0
    command: [ "--config.file=/etc/prometheus/prometheus.yml", "--storage.tsdb.retention.time=7d" ]
    volumes:
      - /opt/stack/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /opt/stack/prometheus/data:/prometheus
    labels:
      - traefik.http.routers.prom.rule=Host(`${PROM_HOST}`)
      - traefik.http.routers.prom.entrypoints=websecure
      - traefik.http.routers.prom.tls.certresolver=le
      - traefik.http.services.prom.loadbalancer.server.port=9090
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.3
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS}
      GF_SERVER_ROOT_URL: https://${GRAFANA_HOST}
    volumes:
      - /opt/stack/grafana/data:/var/lib/grafana
      - /opt/stack/grafana/provisioning:/etc/grafana/provisioning
    labels:
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_HOST}`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls.certresolver=le
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    restart: unless-stopped

volumes:
  pgdata:
    driver: local
  grafanadata:
    driver: local